<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseWrapper.Mysql</name>
    </assembly>
    <members>
        <member name="T:DatabaseWrapper.Mysql.DatabaseClient">
            <summary>
            Database client for Mysql.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Mysql.DatabaseClient.ConnectionString">
            <summary>
            The connection string used to connect to the database.
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Mysql.DatabaseClient.LogQueries">
            <summary>
            Enable or disable logging of queries using the Logger(string msg) method (default: false).
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Mysql.DatabaseClient.LogResults">
            <summary>
            Enable or disable logging of query results using the Logger(string msg) method (default: false).
            </summary>
        </member>
        <member name="F:DatabaseWrapper.Mysql.DatabaseClient.Logger">
            <summary>
            Method to invoke when sending a log message.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Mysql.DatabaseClient.TimestampFormat">
            <summary>
            Timestamp format.
            Default is yyyy-MM-dd HH:mm:ss.ffffff.
            </summary>
        </member>
        <member name="P:DatabaseWrapper.Mysql.DatabaseClient.MaxStatementLength">
            <summary>
            Maximum supported statement length.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.#ctor(DatabaseWrapper.Core.DatabaseSettings)">
            <summary>
            Create an instance of the database client.
            </summary>
            <param name="settings">Database settings.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Create an instance of the database client.
            </summary> 
            <param name="serverIp">The IP address or hostname of the database server.</param>
            <param name="serverPort">The TCP port of the database server.</param>
            <param name="username">The username to use when authenticating with the database server.</param>
            <param name="password">The password to use when authenticating with the database server.</param> 
            <param name="database">The name of the database with which to connect.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Dispose">
            <summary>
            Tear down the client and dispose of resources.
            </summary>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.ListTables">
            <summary>
            List all tables in the database.
            </summary>
            <returns>List of strings, each being a table name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.TableExists(System.String)">
            <summary>
            Check if a table exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.DescribeTable(System.String)">
            <summary>
            Show the columns and column metadata from a specific table.
            </summary>
            <param name="tableName">The table to view.</param>
            <returns>A list of column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.DescribeDatabase">
            <summary>
            Describe each of the tables in the database.
            </summary>
            <returns>Dictionary where Key is table name, value is List of Column objects.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.CreateTable(System.String,System.Collections.Generic.List{DatabaseWrapper.Core.Column})">
            <summary>
            Create a table with a specified name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">Columns.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.DropTable(System.String)">
            <summary>
            Drop the specified table.  
            </summary>
            <param name="tableName">The table to drop.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.GetPrimaryKeyColumn(System.String)">
            <summary>
            Retrieve the name of the primary key column from a specific table.
            </summary>
            <param name="tableName">The table of which you want the primary key.</param>
            <returns>A string containing the column name.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.GetColumnNames(System.String)">
            <summary>
            Retrieve a list of the names of columns from within a specific table.
            </summary>
            <param name="tableName">The table of which ou want to retrieve the list of columns.</param>
            <returns>A list of strings containing the column names.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.GetUniqueObjectById(System.String,System.String,System.Object)">
            <summary>
            Returns a DataTable containing at most one row with data from the specified table where the specified column contains the specified value.  Should only be used on key or unique fields.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="columnName">The column containing key or unique fields where a match is desired.</param>
            <param name="value">The value to match in the key or unique field column.  This should be an object that can be cast to a string value.</param>
            <returns>A DataTable containing at most one row.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},DatabaseWrapper.Core.Expression)">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Select(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.List{System.String},DatabaseWrapper.Core.Expression,DatabaseWrapper.Core.ResultOrder[])">
            <summary>
            Execute a SELECT query.
            </summary>
            <param name="tableName">The table from which you wish to SELECT.</param>
            <param name="indexStart">The starting index for retrieval.</param>
            <param name="maxResults">The maximum number of results to retrieve.</param>
            <param name="returnFields">The fields you wish to have returned.  Null returns all.</param>
            <param name="filter">The expression containing the SELECT filter (i.e. WHERE clause data).</param>
            <param name="resultOrder">Specify on which columns and in which direction results should be ordered.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execute an INSERT query.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairs">The key-value pairs for the row you wish to INSERT.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.InsertMultiple(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Execute an INSERT query with multiple values within a transaction.
            </summary>
            <param name="tableName">The table in which you wish to INSERT.</param>
            <param name="keyValuePairList">List of dictionaries containing key-value pairs for the rows you wish to INSERT.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},DatabaseWrapper.Core.Expression)">
            <summary>
            Execute an UPDATE query. 
            </summary>
            <param name="tableName">The table in which you wish to UPDATE.</param>
            <param name="keyValuePairs">The key-value pairs for the data you wish to UPDATE.</param>
            <param name="filter">The expression containing the UPDATE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Delete(System.String,DatabaseWrapper.Core.Expression)">
            <summary>
            Execute a DELETE query.
            </summary>
            <param name="tableName">The table in which you wish to DELETE.</param>
            <param name="filter">The expression containing the DELETE filter (i.e. WHERE clause data).</param> 
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Truncate(System.String)">
            <summary>
            Empties a table completely.
            </summary>
            <param name="tableName">The table you wish to TRUNCATE.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Query(System.String)">
            <summary>
            Execute a query.
            </summary>
            <param name="query">Database query defined outside of the database client.</param>
            <returns>A DataTable containing the results.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Exists(System.String,DatabaseWrapper.Core.Expression)">
            <summary>
            Determine if records exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>True if records exist.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Count(System.String,DatabaseWrapper.Core.Expression)">
            <summary>
            Determine the number of records that exist by filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="filter">Expression.</param>
            <returns>The number of records.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Sum(System.String,System.String,DatabaseWrapper.Core.Expression)">
            <summary>
            Determine the sum of a column for records that match the supplied filter.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="filter">Expression.</param>
            <returns>The sum of the specified column from the matching rows.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Timestamp(System.DateTime)">
            <summary>
            Create a string timestamp from the given DateTime.
            </summary>
            <param name="ts">DateTime.</param>
            <returns>A string with formatted timestamp.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.SanitizeString(System.String)">
            <summary>
            Sanitize an input string.
            </summary>
            <param name="s">The value to sanitize.</param>
            <returns>A sanitized string.</returns>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the object.
            </summary>
            <param name="disposing">Disposing of resources.</param>
        </member>
        <member name="M:DatabaseWrapper.Mysql.DatabaseClient.DbTimestamp(System.DateTime)">
            <summary>
            Convert a DateTime to a formatted string.
            </summary> 
            <param name="ts">The timestamp.</param>
            <returns>A string formatted for use with the specified database.</returns>
        </member>
    </members>
</doc>
